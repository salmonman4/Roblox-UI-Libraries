-- Modern UI Library for Roblox
-- Minimalistic Black & White Theme

local UILibrary = {}
UILibrary.__index = UILibrary

-- Theme Configuration
local Theme = {
    Background = Color3.fromRGB(28, 28, 30),
    Secondary = Color3.fromRGB(38, 38, 40),
    Tertiary = Color3.fromRGB(48, 48, 50),
    Text = Color3.fromRGB(255, 255, 255),
    TextDim = Color3.fromRGB(160, 160, 160),
    Accent = Color3.fromRGB(100, 200, 255),
    Border = Color3.fromRGB(60, 60, 62),
    Shadow = Color3.fromRGB(0, 0, 0)
}

-- Utility Functions
local function CreateInstance(class, properties)
    local instance = Instance.new(class)
    for prop, value in pairs(properties) do
        instance[prop] = value
    end
    return instance
end

local function TweenService()
    return game:GetService("TweenService")
end

local function CreateTween(object, properties, duration)
    local tween = TweenService():Create(
        object,
        TweenInfo.new(duration or 0.3, Enum.EasingStyle.Quart, Enum.EasingDirection.Out),
        properties
    )
    return tween
end

-- Initialize Library
function UILibrary:Create()
    local self = setmetatable({}, UILibrary)
    self.Windows = {}
    self.ScreenGui = CreateInstance("ScreenGui", {
        Name = "ModernUI",
        Parent = game:GetService("CoreGui"),
        ZIndexBehavior = Enum.ZIndexBehavior.Sibling,
        ResetOnSpawn = false
    })
    return self
end

-- Window Class
local Window = {}
Window.__index = Window

function UILibrary:CreateWindow(config)
    config = config or {}
    local window = setmetatable({}, Window)
    
    -- Main Frame
    window.Frame = CreateInstance("Frame", {
        Name = config.Name or "Window",
        Parent = self.ScreenGui,
        BackgroundColor3 = Theme.Background,
        BorderSizePixel = 0,
        Position = UDim2.new(0.5, -250, 0.5, -200),
        Size = config.Size or UDim2.new(0, 500, 0, 400),
        ClipsDescendants = true
    })
    
    -- Rounded Corners
    CreateInstance("UICorner", {
        CornerRadius = UDim.new(0, 12),
        Parent = window.Frame
    })
    
    -- Drop Shadow
    local Shadow = CreateInstance("ImageLabel", {
        Name = "Shadow",
        Parent = window.Frame,
        AnchorPoint = Vector2.new(0.5, 0.5),
        BackgroundTransparency = 1,
        Position = UDim2.new(0.5, 0, 0.5, 4),
        Size = UDim2.new(1, 30, 1, 30),
        ZIndex = -1,
        Image = "rbxassetid://6015897843",
        ImageColor3 = Theme.Shadow,
        ImageTransparency = 0.5,
        ScaleType = Enum.ScaleType.Slice,
        SliceCenter = Rect.new(49, 49, 450, 450)
    })
    
    -- Title Bar
    window.TitleBar = CreateInstance("Frame", {
        Name = "TitleBar",
        Parent = window.Frame,
        BackgroundColor3 = Theme.Background,
        BorderSizePixel = 0,
        Size = UDim2.new(1, 0, 0, 40)
    })
    
    -- Title Text
    window.Title = CreateInstance("TextLabel", {
        Name = "Title",
        Parent = window.TitleBar,
        BackgroundTransparency = 1,
        Position = UDim2.new(0, 15, 0, 0),
        Size = UDim2.new(0.7, -15, 1, 0),
        Font = Enum.Font.Gotham,
        Text = config.Name or "Window",
        TextColor3 = Theme.Text,
        TextScaled = false,
        TextSize = 16,
        TextXAlignment = Enum.TextXAlignment.Left
    })
    
    -- Control Buttons Container
    local Controls = CreateInstance("Frame", {
        Name = "Controls",
        Parent = window.TitleBar,
        AnchorPoint = Vector2.new(1, 0.5),
        BackgroundTransparency = 1,
        Position = UDim2.new(1, -10, 0.5, 0),
        Size = UDim2.new(0, 60, 0, 20)
    })
    
    CreateInstance("UIListLayout", {
        Parent = Controls,
        FillDirection = Enum.FillDirection.Horizontal,
        HorizontalAlignment = Enum.HorizontalAlignment.Right,
        SortOrder = Enum.SortOrder.LayoutOrder,
        Padding = UDim.new(0, 8)
    })
    
    -- Close Button
    local CloseBtn = CreateInstance("ImageButton", {
        Name = "Close",
        Parent = Controls,
        BackgroundTransparency = 1,
        Size = UDim2.new(0, 16, 0, 16),
        Image = "rbxassetid://7072725342",
        ImageColor3 = Theme.TextDim
    })
    
    CloseBtn.MouseEnter:Connect(function()
        CreateTween(CloseBtn, {ImageColor3 = Theme.Text}, 0.2):Play()
    end)
    
    CloseBtn.MouseLeave:Connect(function()
        CreateTween(CloseBtn, {ImageColor3 = Theme.TextDim}, 0.2):Play()
    end)
    
    CloseBtn.MouseButton1Click:Connect(function()
        window:Destroy()
    end)
    
    -- Tab Container
    window.TabContainer = CreateInstance("Frame", {
        Name = "TabContainer",
        Parent = window.Frame,
        BackgroundColor3 = Theme.Secondary,
        BorderSizePixel = 0,
        Position = UDim2.new(0, 0, 0, 40),
        Size = UDim2.new(1, 0, 0, 35)
    })
    
    window.TabButtons = CreateInstance("Frame", {
        Name = "TabButtons",
        Parent = window.TabContainer,
        BackgroundTransparency = 1,
        Size = UDim2.new(1, 0, 1, 0)
    })
    
    CreateInstance("UIListLayout", {
        Parent = window.TabButtons,
        FillDirection = Enum.FillDirection.Horizontal,
        SortOrder = Enum.SortOrder.LayoutOrder,
        Padding = UDim.new(0, 0)
    })
    
    -- Content Container
    window.ContentContainer = CreateInstance("Frame", {
        Name = "ContentContainer",
        Parent = window.Frame,
        BackgroundTransparency = 1,
        Position = UDim2.new(0, 0, 0, 75),
        Size = UDim2.new(1, 0, 1, -75)
    })
    
    -- Make Draggable
    local dragging, dragInput, dragStart, startPos
    
    window.TitleBar.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            dragging = true
            dragStart = input.Position
            startPos = window.Frame.Position
        end
    end)
    
    game:GetService("UserInputService").InputChanged:Connect(function(input)
        if dragging and input.UserInputType == Enum.UserInputType.MouseMovement then
            local delta = input.Position - dragStart
            window.Frame.Position = UDim2.new(
                startPos.X.Scale,
                startPos.X.Offset + delta.X,
                startPos.Y.Scale,
                startPos.Y.Offset + delta.Y
            )
        end
    end)
    
    game:GetService("UserInputService").InputEnded:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            dragging = false
        end
    end)
    
    window.Tabs = {}
    table.insert(self.Windows, window)
    return window
end

-- Tab Class
local Tab = {}
Tab.__index = Tab

function Window:CreateTab(name, icon)
    local tab = setmetatable({}, Tab)
    
    -- Tab Button
    tab.Button = CreateInstance("TextButton", {
        Name = name,
        Parent = self.TabButtons,
        BackgroundTransparency = 1,
        Size = UDim2.new(0, 120, 1, 0),
        Font = Enum.Font.Gotham,
        Text = "  " .. name,
        TextColor3 = Theme.TextDim,
        TextSize = 14,
        TextXAlignment = Enum.TextXAlignment.Center
    })
    
    -- Tab Indicator
    tab.Indicator = CreateInstance("Frame", {
        Name = "Indicator",
        Parent = tab.Button,
        BackgroundColor3 = Theme.Accent,
        BorderSizePixel = 0,
        Position = UDim2.new(0, 0, 1, -2),
        Size = UDim2.new(1, 0, 0, 2),
        Visible = false
    })
    
    -- Tab Page
    tab.Page = CreateInstance("ScrollingFrame", {
        Name = name .. "Page",
        Parent = self.ContentContainer,
        Active = true,
        BackgroundTransparency = 1,
        BorderSizePixel = 0,
        Position = UDim2.new(0, 0, 0, 0),
        Size = UDim2.new(1, 0, 1, 0),
        CanvasSize = UDim2.new(0, 0, 0, 0),
        ScrollBarThickness = 4,
        ScrollBarImageColor3 = Theme.Border,
        Visible = false
    })
    
    -- Content Layout
    tab.Layout = CreateInstance("UIListLayout", {
        Parent = tab.Page,
        SortOrder = Enum.SortOrder.LayoutOrder,
        Padding = UDim.new(0, 8)
    })
    
    CreateInstance("UIPadding", {
        Parent = tab.Page,
        PaddingLeft = UDim.new(0, 15),
        PaddingRight = UDim.new(0, 15),
        PaddingTop = UDim.new(0, 10),
        PaddingBottom = UDim.new(0, 10)
    })
    
    -- Auto-resize canvas
    tab.Layout:GetPropertyChangedSignal("AbsoluteContentSize"):Connect(function()
        tab.Page.CanvasSize = UDim2.new(0, 0, 0, tab.Layout.AbsoluteContentSize.Y + 20)
    end)
    
    -- Tab Selection
    tab.Button.MouseButton1Click:Connect(function()
        for _, t in pairs(self.Tabs) do
            t.Page.Visible = false
            t.Indicator.Visible = false
            t.Button.TextColor3 = Theme.TextDim
        end
        tab.Page.Visible = true
        tab.Indicator.Visible = true
        tab.Button.TextColor3 = Theme.Text
    end)
    
    -- Select first tab by default
    if #self.Tabs == 0 then
        tab.Page.Visible = true
        tab.Indicator.Visible = true
        tab.Button.TextColor3 = Theme.Text
    end
    
    table.insert(self.Tabs, tab)
    return tab
end

-- Section Class
function Tab:CreateSection(name)
    local section = {}
    
    section.Frame = CreateInstance("Frame", {
        Name = name,
        Parent = self.Page,
        BackgroundColor3 = Theme.Secondary,
        BorderSizePixel = 0,
        Size = UDim2.new(1, 0, 0, 30)
    })
    
    CreateInstance("UICorner", {
        CornerRadius = UDim.new(0, 8),
        Parent = section.Frame
    })
    
    section.Label = CreateInstance("TextLabel", {
        Name = "SectionLabel",
        Parent = section.Frame,
        BackgroundTransparency = 1,
        Position = UDim2.new(0, 12, 0, 0),
        Size = UDim2.new(1, -24, 1, 0),
        Font = Enum.Font.GothamBold,
        Text = name,
        TextColor3 = Theme.Text,
        TextSize = 13,
        TextXAlignment = Enum.TextXAlignment.Left
    })
    
    return section
end

-- Toggle Element
function Tab:CreateToggle(config)
    config = config or {}
    local toggle = {}
    
    toggle.Frame = CreateInstance("Frame", {
        Name = config.Name or "Toggle",
        Parent = self.Page,
        BackgroundTransparency = 1,
        Size = UDim2.new(1, 0, 0, 40)
    })
    
    toggle.Label = CreateInstance("TextLabel", {
        Name = "Label",
        Parent = toggle.Frame,
        BackgroundTransparency = 1,
        Position = UDim2.new(0, 0, 0, 0),
        Size = UDim2.new(0.7, 0, 1, 0),
        Font = Enum.Font.Gotham,
        Text = config.Name or "Toggle",
        TextColor3 = Theme.Text,
        TextSize = 14,
        TextXAlignment = Enum.TextXAlignment.Left
    })
    
    -- Toggle Switch
    toggle.Switch = CreateInstance("Frame", {
        Name = "Switch",
        Parent = toggle.Frame,
        AnchorPoint = Vector2.new(1, 0.5),
        BackgroundColor3 = Theme.Border,
        Position = UDim2.new(1, 0, 0.5, 0),
        Size = UDim2.new(0, 44, 0, 24)
    })
    
    CreateInstance("UICorner", {
        CornerRadius = UDim.new(0, 12),
        Parent = toggle.Switch
    })
    
    toggle.Indicator = CreateInstance("Frame", {
        Name = "Indicator",
        Parent = toggle.Switch,
        BackgroundColor3 = Theme.Text,
        Position = UDim2.new(0, 2, 0, 2),
        Size = UDim2.new(0, 20, 0, 20)
    })
    
    CreateInstance("UICorner", {
        CornerRadius = UDim.new(0, 10),
        Parent = toggle.Indicator
    })
    
    -- Toggle State
    toggle.Enabled = config.Default or false
    toggle.Callback = config.Callback or function() end
    
    local function UpdateToggle()
        if toggle.Enabled then
            CreateTween(toggle.Switch, {BackgroundColor3 = Theme.Accent}, 0.2):Play()
            CreateTween(toggle.Indicator, {Position = UDim2.new(1, -22, 0, 2)}, 0.2):Play()
        else
            CreateTween(toggle.Switch, {BackgroundColor3 = Theme.Border}, 0.2):Play()
            CreateTween(toggle.Indicator, {Position = UDim2.new(0, 2, 0, 2)}, 0.2):Play()
        end
        toggle.Callback(toggle.Enabled)
    end
    
    toggle.Switch.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            toggle.Enabled = not toggle.Enabled
            UpdateToggle()
        end
    end)
    
    UpdateToggle()
    return toggle
end

-- Dropdown Element
function Tab:CreateDropdown(config)
    config = config or {}
    local dropdown = {}
    dropdown.Open = false
    dropdown.Selected = config.Default or "None"
    
    dropdown.Frame = CreateInstance("Frame", {
        Name = config.Name or "Dropdown",
        Parent = self.Page,
        BackgroundTransparency = 1,
        Size = UDim2.new(1, 0, 0, 40)
    })
    
    dropdown.Label = CreateInstance("TextLabel", {
        Name = "Label",
        Parent = dropdown.Frame,
        BackgroundTransparency = 1,
        Position = UDim2.new(0, 0, 0, 0),
        Size = UDim2.new(0.4, 0, 1, 0),
        Font = Enum.Font.Gotham,
        Text = config.Name or "Dropdown",
        TextColor3 = Theme.Text,
        TextSize = 14,
        TextXAlignment = Enum.TextXAlignment.Left
    })
    
    dropdown.Button = CreateInstance("TextButton", {
        Name = "DropdownButton",
        Parent = dropdown.Frame,
        BackgroundColor3 = Theme.Tertiary,
        Position = UDim2.new(0.45, 0, 0.5, -15),
        Size = UDim2.new(0.55, 0, 0, 30),
        Font = Enum.Font.Gotham,
        Text = dropdown.Selected,
        TextColor3 = Theme.TextDim,
        TextSize = 13
    })
    
    CreateInstance("UICorner", {
        CornerRadius = UDim.new(0, 6),
        Parent = dropdown.Button
    })
    
    dropdown.Arrow = CreateInstance("ImageLabel", {
        Name = "Arrow",
        Parent = dropdown.Button,
        AnchorPoint = Vector2.new(1, 0.5),
        BackgroundTransparency = 1,
        Position = UDim2.new(1, -8, 0.5, 0),
        Size = UDim2.new(0, 12, 0, 12),
        Image = "rbxassetid://7072706796",
        ImageColor3 = Theme.TextDim,
        Rotation = 0
    })
    
    dropdown.List = CreateInstance("Frame", {
        Name = "List",
        Parent = dropdown.Frame,
        BackgroundColor3 = Theme.Tertiary,
        BorderSizePixel = 0,
        Position = UDim2.new(0.45, 0, 1, 0),
        Size = UDim2.new(0.55, 0, 0, 0),
        ClipsDescendants = true,
        ZIndex = 10
    })
    
    CreateInstance("UICorner", {
        CornerRadius = UDim.new(0, 6),
        Parent = dropdown.List
    })
    
    CreateInstance("UIListLayout", {
        Parent = dropdown.List,
        SortOrder = Enum.SortOrder.LayoutOrder,
        Padding = UDim.new(0, 2)
    })
    
    CreateInstance("UIPadding", {
        Parent = dropdown.List,
        PaddingLeft = UDim.new(0, 4),
        PaddingRight = UDim.new(0, 4),
        PaddingTop = UDim.new(0, 4),
        PaddingBottom = UDim.new(0, 4)
    })
    
    -- Add Options
    for _, option in ipairs(config.Options or {}) do
        local optionBtn = CreateInstance("TextButton", {
            Name = option,
            Parent = dropdown.List,
            BackgroundColor3 = Theme.Secondary,
            BorderSizePixel = 0,
            Size = UDim2.new(1, 0, 0, 26),
            Font = Enum.Font.Gotham,
            Text = option,
            TextColor3 = Theme.TextDim,
            TextSize = 12
        })
        
        CreateInstance("UICorner", {
            CornerRadius = UDim.new(0, 4),
            Parent = optionBtn
        })
        
        optionBtn.MouseEnter:Connect(function()
            CreateTween(optionBtn, {BackgroundColor3 = Theme.Border}, 0.2):Play()
            CreateTween(optionBtn, {TextColor3 = Theme.Text}, 0.2):Play()
        end)
        
        optionBtn.MouseLeave:Connect(function()
            CreateTween(optionBtn, {BackgroundColor3 = Theme.Secondary}, 0.2):Play()
            CreateTween(optionBtn, {TextColor3 = Theme.TextDim}, 0.2):Play()
        end)
        
        optionBtn.MouseButton1Click:Connect(function()
            dropdown.Selected = option
            dropdown.Button.Text = option
            dropdown:Close()
            if config.Callback then
                config.Callback(option)
            end
        end)
    end
    
    function dropdown:Open()
        self.Open = true
        local targetSize = UDim2.new(0.55, 0, 0, #config.Options * 28 + 8)
        CreateTween(self.List, {Size = targetSize}, 0.3):Play()
        CreateTween(self.Arrow, {Rotation = 180}, 0.3):Play()
    end
    
    function dropdown:Close()
        self.Open = false
        CreateTween(self.List, {Size = UDim2.new(0.55, 0, 0, 0)}, 0.3):Play()
        CreateTween(self.Arrow, {Rotation = 0}, 0.3):Play()
    end
    
    dropdown.Button.MouseButton1Click:Connect(function()
        if dropdown.Open then
            dropdown:Close()
        else
            dropdown:Open()
        end
    end)
    
    return dropdown
end

-- Button Element
function Tab:CreateButton(config)
    config = config or {}
    local button = {}
    
    button.Frame = CreateInstance("Frame", {
        Name = config.Name or "Button",
        Parent = self.Page,
        BackgroundTransparency = 1,
        Size = UDim2.new(1, 0, 0, 35)
    })
    
    button.Button = CreateInstance("TextButton", {
        Name = "Button",
        Parent = button.Frame,
        BackgroundColor3 = Theme.Tertiary,
        BorderSizePixel = 0,
        Size = UDim2.new(1, 0, 1, 0),
        Font = Enum.Font.Gotham,
        Text = config.Name or "Button",
        TextColor3 = Theme.Text,
        TextSize = 14
    })
    
    CreateInstance("UICorner", {
        CornerRadius = UDim.new(0, 6),
        Parent = button.Button
    })
    
    button.Button.MouseEnter:Connect(function()
        CreateTween(button.Button, {BackgroundColor3 = Theme.Border}, 0.2):Play()
    end)
    
    button.Button.MouseLeave:Connect(function()
        CreateTween(button.Button, {BackgroundColor3 = Theme.Tertiary}, 0.2):Play()
    end)
    
    button.Button.MouseButton1Click:Connect(function()
        if config.Callback then
            config.Callback()
        end
        -- Click animation
        CreateTween(button.Button, {BackgroundColor3 = Theme.Accent}, 0.1):Play()
        wait(0.1)
        CreateTween(button.Button, {BackgroundColor3 = Theme.Tertiary}, 0.2):Play()
    end)
    
    return button
end

-- Slider Element
function Tab:CreateSlider(config)
    config = config or {}
    local slider = {}
    slider.Value = config.Default or config.Min or 0
    
    slider.Frame = CreateInstance("Frame", {
        Name = config.Name or "Slider",
        Parent = self.Page,
        BackgroundTransparency = 1,
        Size = UDim2.new(1, 0, 0, 50)
    })
    
    slider.Label = CreateInstance("TextLabel", {
        Name = "Label",
        Parent = slider.Frame,
        BackgroundTransparency = 1,
        Position = UDim2.new(0, 0, 0, 0),
        Size = UDim2.new(0.6, 0, 0, 25),
        Font = Enum.Font.Gotham,
        Text = config.Name or "Slider",
        TextColor3 = Theme.Text,
        TextSize = 14,
        TextXAlignment = Enum.TextXAlignment.Left
    })
    
    slider.ValueLabel = CreateInstance("TextLabel", {
        Name = "Value",
        Parent = slider.Frame,
        BackgroundTransparency = 1,
        Position = UDim2.new(1, 0, 0, 0),
        Size = UDim2.new(0, -50, 0, 25),
        Font = Enum.Font.Gotham,
        Text = tostring(slider.Value),
        TextColor3 = Theme.TextDim,
        TextSize = 13,
        TextXAlignment = Enum.TextXAlignment.Right
    })
    
    slider.SliderBar = CreateInstance("Frame", {
        Name = "SliderBar",
        Parent = slider.Frame,
        BackgroundColor3 = Theme.Border,
        Position = UDim2.new(0, 0, 0, 30),
        Size = UDim2.new(1, 0, 0, 6)
    })
    
    CreateInstance("UICorner", {
        CornerRadius = UDim.new(0, 3),
        Parent = slider.SliderBar
    })
    
    slider.Fill = CreateInstance("Frame", {
        Name = "Fill",
        Parent = slider.SliderBar,
        BackgroundColor3 = Theme.Accent,
        Size = UDim2.new(0, 0, 1, 0)
    })
    
    CreateInstance("UICorner", {
        CornerRadius = UDim.new(0, 3),
        Parent = slider.Fill
    })
    
    slider.Knob = CreateInstance("Frame", {
        Name = "Knob",
        Parent = slider.SliderBar,
        BackgroundColor3 = Theme.Text,
        Position = UDim2.new(0, 0, 0.5, 0),
        Size = UDim2.new(0, 16, 0, 16),
        AnchorPoint = Vector2.new(0.5, 0.5)
    })
    
    CreateInstance("UICorner", {
        CornerRadius = UDim.new(0, 8),
        Parent = slider.Knob
    })
    
    -- Slider Logic
    local dragging = false
    local min = config.Min or 0
    local max = config.Max or 100
    
    local function UpdateSlider(input)
        local pos = math.clamp((input.Position.X - slider.SliderBar.AbsolutePosition.X) / slider.SliderBar.AbsoluteSize.X, 0, 1)
        slider.Value = math.floor(min + (max - min) * pos)
        slider.ValueLabel.Text = tostring(slider.Value)
        slider.Fill.Size = UDim2.new(pos, 0, 1, 0)
        slider.Knob.Position = UDim2.new(pos, 0, 0.5, 0)
        
        if config.Callback then
            config.Callback(slider.Value)
        end
    end
    
    slider.SliderBar.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            dragging = true
            UpdateSlider(input)
        end
    end)
    
    game:GetService("UserInputService").InputChanged:Connect(function(input)
        if dragging and input.UserInputType == Enum.UserInputType.MouseMovement then
            UpdateSlider(input)
        end
    end)
    
    game:GetService("UserInputService").InputEnded:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            dragging = false
        end
    end)
    
    -- Set initial value
    local initialPos = (slider.Value - min) / (max - min)
    slider.Fill.Size = UDim2.new(initialPos, 0, 1, 0)
    slider.Knob.Position = UDim2.new(initialPos, 0, 0.5, 0)
    
    return slider
end

-- Textbox Element
function Tab:CreateTextbox(config)
    config = config or {}
    local textbox = {}
    
    textbox.Frame = CreateInstance("Frame", {
        Name = config.Name or "Textbox",
        Parent = self.Page,
        BackgroundTransparency = 1,
        Size = UDim2.new(1, 0, 0, 40)
    })
    
    textbox.Label = CreateInstance("TextLabel", {
        Name = "Label",
        Parent = textbox.Frame,
        BackgroundTransparency = 1,
        Position = UDim2.new(0, 0, 0, 0),
        Size = UDim2.new(0.4, 0, 1, 0),
        Font = Enum.Font.Gotham,
        Text = config.Name or "Textbox",
        TextColor3 = Theme.Text,
        TextSize = 14,
        TextXAlignment = Enum.TextXAlignment.Left
    })
    
    textbox.Input = CreateInstance("TextBox", {
        Name = "Input",
        Parent = textbox.Frame,
        BackgroundColor3 = Theme.Tertiary,
        Position = UDim2.new(0.45, 0, 0.5, -15),
        Size = UDim2.new(0.55, 0, 0, 30),
        Font = Enum.Font.Gotham,
        PlaceholderText = config.Placeholder or "Enter text...",
        PlaceholderColor3 = Theme.TextDim,
        Text = config.Default or "",
        TextColor3 = Theme.Text,
        TextSize = 13,
        ClearTextOnFocus = config.ClearOnFocus or false
    })
    
    CreateInstance("UICorner", {
        CornerRadius = UDim.new(0, 6),
        Parent = textbox.Input
    })
    
    CreateInstance("UIPadding", {
        Parent = textbox.Input,
        PaddingLeft = UDim.new(0, 8),
        PaddingRight = UDim.new(0, 8)
    })
    
    textbox.Input.FocusLost:Connect(function(enterPressed)
        if config.Callback then
            config.Callback(textbox.Input.Text, enterPressed)
        end
    end)
    
    return textbox
end

-- Label Element
function Tab:CreateLabel(text)
    local label = {}
    
    label.Frame = CreateInstance("Frame", {
        Name = "Label",
        Parent = self.Page,
        BackgroundTransparency = 1,
        Size = UDim2.new(1, 0, 0, 20)
    })
    
    label.Text = CreateInstance("TextLabel", {
        Name = "LabelText",
        Parent = label.Frame,
        BackgroundTransparency = 1,
        Size = UDim2.new(1, 0, 1, 0),
        Font = Enum.Font.Gotham,
        Text = text or "Label",
        TextColor3 = Theme.TextDim,
        TextSize = 13,
        TextXAlignment = Enum.TextXAlignment.Left
    })
    
    function label:SetText(newText)
        self.Text.Text = newText
    end
    
    return label
end

-- Keybind Element
function Tab:CreateKeybind(config)
    config = config or {}
    local keybind = {}
    keybind.Key = config.Default or Enum.KeyCode.F
    keybind.Listening = false
    
    keybind.Frame = CreateInstance("Frame", {
        Name = config.Name or "Keybind",
        Parent = self.Page,
        BackgroundTransparency = 1,
        Size = UDim2.new(1, 0, 0, 40)
    })
    
    keybind.Label = CreateInstance("TextLabel", {
        Name = "Label",
        Parent = keybind.Frame,
        BackgroundTransparency = 1,
        Position = UDim2.new(0, 0, 0, 0),
        Size = UDim2.new(0.6, 0, 1, 0),
        Font = Enum.Font.Gotham,
        Text = config.Name or "Keybind",
        TextColor3 = Theme.Text,
        TextSize = 14,
        TextXAlignment = Enum.TextXAlignment.Left
    })
    
    keybind.Button = CreateInstance("TextButton", {
        Name = "KeybindButton",
        Parent = keybind.Frame,
        BackgroundColor3 = Theme.Tertiary,
        Position = UDim2.new(1, -100, 0.5, -15),
        Size = UDim2.new(0, 100, 0, 30),
        Font = Enum.Font.Gotham,
        Text = keybind.Key.Name,
        TextColor3 = Theme.TextDim,
        TextSize = 13
    })
    
    CreateInstance("UICorner", {
        CornerRadius = UDim.new(0, 6),
        Parent = keybind.Button
    })
    
    local UserInputService = game:GetService("UserInputService")
    
    keybind.Button.MouseButton1Click:Connect(function()
        keybind.Listening = true
        keybind.Button.Text = "..."
        keybind.Button.TextColor3 = Theme.Accent
    end)
    
    UserInputService.InputBegan:Connect(function(input, gameProcessed)
        if keybind.Listening then
            if input.KeyCode ~= Enum.KeyCode.Unknown then
                keybind.Key = input.KeyCode
                keybind.Button.Text = input.KeyCode.Name
                keybind.Button.TextColor3 = Theme.TextDim
                keybind.Listening = false
                
                if config.Callback then
                    config.Callback(input.KeyCode)
                end
            end
        elseif not gameProcessed and input.KeyCode == keybind.Key then
            if config.Callback then
                config.Callback(input.KeyCode)
            end
        end
    end)
    
    return keybind
end

-- Color Picker Element
function Tab:CreateColorPicker(config)
    config = config or {}
    local colorpicker = {}
    colorpicker.Color = config.Default or Color3.fromRGB(255, 255, 255)
    colorpicker.Open = false
    
    colorpicker.Frame = CreateInstance("Frame", {
        Name = config.Name or "ColorPicker",
        Parent = self.Page,
        BackgroundTransparency = 1,
        Size = UDim2.new(1, 0, 0, 40)
    })
    
    colorpicker.Label = CreateInstance("TextLabel", {
        Name = "Label",
        Parent = colorpicker.Frame,
        BackgroundTransparency = 1,
        Position = UDim2.new(0, 0, 0, 0),
        Size = UDim2.new(0.7, 0, 1, 0),
        Font = Enum.Font.Gotham,
        Text = config.Name or "Color Picker",
        TextColor3 = Theme.Text,
        TextSize = 14,
        TextXAlignment = Enum.TextXAlignment.Left
    })
    
    colorpicker.Preview = CreateInstance("Frame", {
        Name = "Preview",
        Parent = colorpicker.Frame,
        BackgroundColor3 = colorpicker.Color,
        Position = UDim2.new(1, -35, 0.5, -12),
        Size = UDim2.new(0, 24, 0, 24)
    })
    
    CreateInstance("UICorner", {
        CornerRadius = UDim.new(0, 4),
        Parent = colorpicker.Preview
    })
    
    CreateInstance("UIStroke", {
        Parent = colorpicker.Preview,
        Color = Theme.Border,
        Thickness = 1
    })
    
    -- Color Picker Window (simplified)
    colorpicker.PickerFrame = CreateInstance("Frame", {
        Name = "PickerFrame",
        Parent = colorpicker.Frame,
        BackgroundColor3 = Theme.Secondary,
        BorderSizePixel = 0,
        Position = UDim2.new(0.5, 0, 1, 5),
        Size = UDim2.new(0, 200, 0, 0),
        ClipsDescendants = true,
        ZIndex = 20,
        Visible = true
    })
    
    CreateInstance("UICorner", {
        CornerRadius = UDim.new(0, 8),
        Parent = colorpicker.PickerFrame
    })
    
    -- RGB Sliders Container
    local slidersContainer = CreateInstance("Frame", {
        Name = "Sliders",
        Parent = colorpicker.PickerFrame,
        BackgroundTransparency = 1,
        Position = UDim2.new(0, 10, 0, 10),
        Size = UDim2.new(1, -20, 1, -20)
    })
    
    local function CreateRGBSlider(name, yPos, defaultValue)
        local slider = {}
        
        slider.Frame = CreateInstance("Frame", {
            Name = name,
            Parent = slidersContainer,
            BackgroundTransparency = 1,
            Position = UDim2.new(0, 0, 0, yPos),
            Size = UDim2.new(1, 0, 0, 30)
        })
        
        slider.Label = CreateInstance("TextLabel", {
            Name = "Label",
            Parent = slider.Frame,
            BackgroundTransparency = 1,
            Size = UDim2.new(0, 20, 1, 0),
            Font = Enum.Font.Gotham,
            Text = name,
            TextColor3 = Theme.Text,
            TextSize = 12
        })
        
        slider.Bar = CreateInstance("Frame", {
            Name = "Bar",
            Parent = slider.Frame,
            BackgroundColor3 = Theme.Border,
            Position = UDim2.new(0, 25, 0.5, -3),
            Size = UDim2.new(1, -55, 0, 6)
        })
        
        CreateInstance("UICorner", {
            CornerRadius = UDim.new(0, 3),
            Parent = slider.Bar
        })
        
        slider.Fill = CreateInstance("Frame", {
            Name = "Fill",
            Parent = slider.Bar,
            BackgroundColor3 = Theme.Accent,
            Size = UDim2.new(defaultValue / 255, 0, 1, 0)
        })
        
        CreateInstance("UICorner", {
            CornerRadius = UDim.new(0, 3),
            Parent = slider.Fill
        })
        
        slider.Value = CreateInstance("TextLabel", {
            Name = "Value",
            Parent = slider.Frame,
            BackgroundTransparency = 1,
            Position = UDim2.new(1, -25, 0, 0),
            Size = UDim2.new(0, 25, 1, 0),
            Font = Enum.Font.Gotham,
            Text = tostring(defaultValue),
            TextColor3 = Theme.TextDim,
            TextSize = 11
        })
        
        return slider
    end
    
    local r = math.floor(colorpicker.Color.R * 255)
    local g = math.floor(colorpicker.Color.G * 255)
    local b = math.floor(colorpicker.Color.B * 255)
    
    local redSlider = CreateRGBSlider("R", 0, r)
    local greenSlider = CreateRGBSlider("G", 35, g)
    local blueSlider = CreateRGBSlider("B", 70, b)
    
    local function UpdateColor()
        local r = tonumber(redSlider.Value.Text) or 0
        local g = tonumber(greenSlider.Value.Text) or 0
        local b = tonumber(blueSlider.Value.Text) or 0
        colorpicker.Color = Color3.fromRGB(r, g, b)
        colorpicker.Preview.BackgroundColor3 = colorpicker.Color
        
        if config.Callback then
            config.Callback(colorpicker.Color)
        end
    end
    
    -- Slider interaction logic for each RGB slider
    for _, slider in pairs({redSlider, greenSlider, blueSlider}) do
        local dragging = false
        
        slider.Bar.InputBegan:Connect(function(input)
            if input.UserInputType == Enum.UserInputType.MouseButton1 then
                dragging = true
                local pos = math.clamp((input.Position.X - slider.Bar.AbsolutePosition.X) / slider.Bar.AbsoluteSize.X, 0, 1)
                local value = math.floor(pos * 255)
                slider.Fill.Size = UDim2.new(pos, 0, 1, 0)
                slider.Value.Text = tostring(value)
                UpdateColor()
            end
        end)
        
        game:GetService("UserInputService").InputChanged:Connect(function(input)
            if dragging and input.UserInputType == Enum.UserInputType.MouseMovement then
                local pos = math.clamp((input.Position.X - slider.Bar.AbsolutePosition.X) / slider.Bar.AbsoluteSize.X, 0, 1)
                local value = math.floor(pos * 255)
                slider.Fill.Size = UDim2.new(pos, 0, 1, 0)
                slider.Value.Text = tostring(value)
                UpdateColor()
            end
        end)
        
        game:GetService("UserInputService").InputEnded:Connect(function(input)
            if input.UserInputType == Enum.UserInputType.MouseButton1 then
                dragging = false
            end
        end)
    end
    
    -- Toggle picker
    colorpicker.Preview.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            colorpicker.Open = not colorpicker.Open
            if colorpicker.Open then
                CreateTween(colorpicker.PickerFrame, {Size = UDim2.new(0, 200, 0, 115)}, 0.3):Play()
            else
                CreateTween(colorpicker.PickerFrame, {Size = UDim2.new(0, 200, 0, 0)}, 0.3):Play()
            end
        end
    end)
    
    return colorpicker
end

-- Notification System
function UILibrary:Notify(config)
    config = config or {}
    
    local notification = CreateInstance("Frame", {
        Name = "Notification",
        Parent = self.ScreenGui,
        BackgroundColor3 = Theme.Secondary,
        BorderSizePixel = 0,
        Position = UDim2.new(1, 320, 1, -80),
        Size = UDim2.new(0, 300, 0, 60),
        ZIndex = 100
    })
    
    CreateInstance("UICorner", {
        CornerRadius = UDim.new(0, 8),
        Parent = notification
    })
    
    CreateInstance("UIStroke", {
        Parent = notification,
        Color = Theme.Border,
        Thickness = 1
    })
    
    local title = CreateInstance("TextLabel", {
        Name = "Title",
        Parent = notification,
        BackgroundTransparency = 1,
        Position = UDim2.new(0, 12, 0, 8),
        Size = UDim2.new(1, -24, 0, 18),
        Font = Enum.Font.GothamBold,
        Text = config.Title or "Notification",
        TextColor3 = Theme.Text,
        TextSize = 14,
        TextXAlignment = Enum.TextXAlignment.Left
    })
    
    local content = CreateInstance("TextLabel", {
        Name = "Content",
        Parent = notification,
        BackgroundTransparency = 1,
        Position = UDim2.new(0, 12, 0, 28),
        Size = UDim2.new(1, -24, 0, 24),
        Font = Enum.Font.Gotham,
        Text = config.Content or "Notification content",
        TextColor3 = Theme.TextDim,
        TextSize = 12,
        TextXAlignment = Enum.TextXAlignment.Left,
        TextWrapped = true
    })
    
    -- Animate in
    CreateTween(notification, {Position = UDim2.new(1, -310, 1, -80)}, 0.5):Play()
    
    -- Auto remove
    wait(config.Duration or 3)
    CreateTween(notification, {Position = UDim2.new(1, 320, 1, -80)}, 0.5):Play()
    wait(0.5)
    notification:Destroy()
end

-- Cleanup
function Window:Destroy()
    CreateTween(self.Frame, {Size = UDim2.new(0, 0, 0, 0)}, 0.3):Play()
    wait(0.3)
    self.Frame:Destroy()
end

return UILibrary
