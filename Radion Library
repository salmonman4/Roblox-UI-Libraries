-- Advanced Modern UI Library for Roblox
-- Professional Black & White Theme with Enhanced Features

local UILibrary = {}
UILibrary.__index = UILibrary

-- Theme Configuration
local Theme = {
    Background = Color3.fromRGB(24, 24, 26),
    Secondary = Color3.fromRGB(32, 32, 34),
    Tertiary = Color3.fromRGB(40, 40, 42),
    Quaternary = Color3.fromRGB(48, 48, 50),
    Text = Color3.fromRGB(255, 255, 255),
    TextDim = Color3.fromRGB(160, 160, 165),
    TextDark = Color3.fromRGB(120, 120, 125),
    Accent = Color3.fromRGB(88, 166, 255),
    Success = Color3.fromRGB(88, 255, 166),
    Warning = Color3.fromRGB(255, 166, 88),
    Error = Color3.fromRGB(255, 88, 88),
    Border = Color3.fromRGB(55, 55, 58),
    Separator = Color3.fromRGB(45, 45, 48),
    Shadow = Color3.fromRGB(0, 0, 0)
}

-- Icon Library
local Icons = {
    Character = "rbxassetid://7072717697",
    Automation = "rbxassetid://7072718406",
    Combat = "rbxassetid://7072723006",
    Teleport = "rbxassetid://7072722945",
    Settings = "rbxassetid://7072721682",
    Close = "rbxassetid://7072725342",
    Minimize = "rbxassetid://7072719338",
    Expand = "rbxassetid://7072706796",
    Collapse = "rbxassetid://7072706663",
    Check = "rbxassetid://7072705598",
    Tree = "rbxassetid://7072717958",
    Fire = "rbxassetid://7072717463",
    Wood = "rbxassetid://7072718286",
    Food = "rbxassetid://7072717599",
    Bag = "rbxassetid://7072720783",
    Shield = "rbxassetid://7072724014",
    Sword = "rbxassetid://7072723103",
    Arrow = "rbxassetid://7072706796",
    Pin = "rbxassetid://7072719796",
    Home = "rbxassetid://7072717859",
    Stats = "rbxassetid://7072723451"
}

-- Utility Functions
local function CreateInstance(class, properties)
    local instance = Instance.new(class)
    for prop, value in pairs(properties) do
        instance[prop] = value
    end
    return instance
end

local function TweenService()
    return game:GetService("TweenService")
end

local function CreateTween(object, properties, duration, style)
    local tween = TweenService():Create(
        object,
        TweenInfo.new(
            duration or 0.25,
            style or Enum.EasingStyle.Quart,
            Enum.EasingDirection.Out
        ),
        properties
    )
    return tween
end

-- Initialize Library
function UILibrary:Create()
    local self = setmetatable({}, UILibrary)
    self.Windows = {}
    self.ScreenGui = CreateInstance("ScreenGui", {
        Name = "ModernUI_Professional",
        Parent = game:GetService("CoreGui"),
        ZIndexBehavior = Enum.ZIndexBehavior.Sibling,
        ResetOnSpawn = false,
        IgnoreGuiInset = true
    })
    return self
end

-- Window Class
local Window = {}
Window.__index = Window

function UILibrary:CreateWindow(config)
    config = config or {}
    local window = setmetatable({}, Window)
    
    -- Main Frame
    window.Frame = CreateInstance("Frame", {
        Name = config.Name or "Window",
        Parent = self.ScreenGui,
        BackgroundColor3 = Theme.Background,
        BorderSizePixel = 0,
        Position = UDim2.new(0.5, -275, 0.5, -225),
        Size = config.Size or UDim2.new(0, 550, 0, 450),
        ClipsDescendants = true
    })
    
    -- Rounded Corners
    CreateInstance("UICorner", {
        CornerRadius = UDim.new(0, 14),
        Parent = window.Frame
    })
    
    -- Drop Shadow
    local Shadow = CreateInstance("ImageLabel", {
        Name = "Shadow",
        Parent = window.Frame,
        AnchorPoint = Vector2.new(0.5, 0.5),
        BackgroundTransparency = 1,
        Position = UDim2.new(0.5, 0, 0.5, 6),
        Size = UDim2.new(1, 40, 1, 40),
        ZIndex = -1,
        Image = "rbxassetid://6015897843",
        ImageColor3 = Theme.Shadow,
        ImageTransparency = 0.4,
        ScaleType = Enum.ScaleType.Slice,
        SliceCenter = Rect.new(49, 49, 450, 450)
    })
    
    -- Title Bar
    window.TitleBar = CreateInstance("Frame", {
        Name = "TitleBar",
        Parent = window.Frame,
        BackgroundColor3 = Theme.Background,
        BorderSizePixel = 0,
        Size = UDim2.new(1, 0, 0, 42)
    })
    
    -- Title Border
    CreateInstance("Frame", {
        Name = "TitleBorder",
        Parent = window.TitleBar,
        BackgroundColor3 = Theme.Separator,
        BorderSizePixel = 0,
        Position = UDim2.new(0, 0, 1, -1),
        Size = UDim2.new(1, 0, 0, 1)
    })
    
    -- Title Text
    window.Title = CreateInstance("TextLabel", {
        Name = "Title",
        Parent = window.TitleBar,
        BackgroundTransparency = 1,
        Position = UDim2.new(0, 16, 0, 0),
        Size = UDim2.new(0.7, -16, 1, 0),
        Font = Enum.Font.GothamMedium,
        Text = config.Name or "Window",
        TextColor3 = Theme.Text,
        TextScaled = false,
        TextSize = 15,
        TextXAlignment = Enum.TextXAlignment.Left
    })
    
    -- Control Buttons Container
    local Controls = CreateInstance("Frame", {
        Name = "Controls",
        Parent = window.TitleBar,
        AnchorPoint = Vector2.new(1, 0.5),
        BackgroundTransparency = 1,
        Position = UDim2.new(1, -12, 0.5, 0),
        Size = UDim2.new(0, 70, 0, 24)
    })
    
    CreateInstance("UIListLayout", {
        Parent = Controls,
        FillDirection = Enum.FillDirection.Horizontal,
        HorizontalAlignment = Enum.HorizontalAlignment.Right,
        SortOrder = Enum.SortOrder.LayoutOrder,
        Padding = UDim.new(0, 10)
    })
    
    -- Window Control Buttons
    for _, control in ipairs({
        {Name = "Minimize", Icon = Icons.Minimize, Order = 1},
        {Name = "Close", Icon = Icons.Close, Order = 2}
    }) do
        local btn = CreateInstance("ImageButton", {
            Name = control.Name,
            Parent = Controls,
            BackgroundTransparency = 1,
            Size = UDim2.new(0, 18, 0, 18),
            Image = control.Icon,
            ImageColor3 = Theme.TextDark,
            LayoutOrder = control.Order
        })
        
        btn.MouseEnter:Connect(function()
            CreateTween(btn, {ImageColor3 = Theme.Text}, 0.15):Play()
        end)
        
        btn.MouseLeave:Connect(function()
            CreateTween(btn, {ImageColor3 = Theme.TextDark}, 0.15):Play()
        end)
        
        if control.Name == "Close" then
            btn.MouseButton1Click:Connect(function()
                window:Destroy()
            end)
        elseif control.Name == "Minimize" then
            btn.MouseButton1Click:Connect(function()
                window.ContentContainer.Visible = not window.ContentContainer.Visible
                if window.ContentContainer.Visible then
                    CreateTween(window.Frame, {Size = config.Size or UDim2.new(0, 550, 0, 450)}, 0.3):Play()
                else
                    CreateTween(window.Frame, {Size = UDim2.new(0, 550, 0, 85)}, 0.3):Play()
                end
            end)
        end
    end
    
    -- Top Tab Bar Container
    window.TopTabBar = CreateInstance("Frame", {
        Name = "TopTabBar",
        Parent = window.Frame,
        BackgroundColor3 = Theme.Secondary,
        BorderSizePixel = 0,
        Position = UDim2.new(0, 0, 0, 42),
        Size = UDim2.new(1, 0, 0, 42)
    })
    
    -- Tab Border
    CreateInstance("Frame", {
        Name = "TabBorder",
        Parent = window.TopTabBar,
        BackgroundColor3 = Theme.Separator,
        BorderSizePixel = 0,
        Position = UDim2.new(0, 0, 1, -1),
        Size = UDim2.new(1, 0, 0, 1)
    })
    
    window.TabButtons = CreateInstance("Frame", {
        Name = "TabButtons",
        Parent = window.TopTabBar,
        BackgroundTransparency = 1,
        Position = UDim2.new(0, 12, 0, 0),
        Size = UDim2.new(1, -24, 1, 0)
    })
    
    CreateInstance("UIListLayout", {
        Parent = window.TabButtons,
        FillDirection = Enum.FillDirection.Horizontal,
        SortOrder = Enum.SortOrder.LayoutOrder,
        Padding = UDim.new(0, 8)
    })
    
    -- Content Container
    window.ContentContainer = CreateInstance("Frame", {
        Name = "ContentContainer",
        Parent = window.Frame,
        BackgroundTransparency = 1,
        Position = UDim2.new(0, 0, 0, 84),
        Size = UDim2.new(1, 0, 1, -84),
        ClipsDescendants = true
    })
    
    -- Make Draggable
    local dragging, dragInput, dragStart, startPos
    
    window.TitleBar.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            dragging = true
            dragStart = input.Position
            startPos = window.Frame.Position
        end
    end)
    
    game:GetService("UserInputService").InputChanged:Connect(function(input)
        if dragging and input.UserInputType == Enum.UserInputType.MouseMovement then
            local delta = input.Position - dragStart
            window.Frame.Position = UDim2.new(
                startPos.X.Scale,
                startPos.X.Offset + delta.X,
                startPos.Y.Scale,
                startPos.Y.Offset + delta.Y
            )
        end
    end)
    
    game:GetService("UserInputService").InputEnded:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            dragging = false
        end
    end)
    
    window.Tabs = {}
    window.CurrentTab = nil
    table.insert(self.Windows, window)
    return window
end

-- Tab Class
local Tab = {}
Tab.__index = Tab

function Window:CreateTab(name, icon)
    local tab = setmetatable({}, Tab)
    tab.Sections = {}
    
    -- Tab Button with Icon
    tab.Button = CreateInstance("Frame", {
        Name = name,
        Parent = self.TabButtons,
        BackgroundColor3 = Theme.Background,
        BackgroundTransparency = 1,
        Size = UDim2.new(0, 100, 1, -8),
        LayoutOrder = #self.Tabs + 1
    })
    
    CreateInstance("UICorner", {
        CornerRadius = UDim.new(0, 8),
        Parent = tab.Button
    })
    
    local ButtonContent = CreateInstance("Frame", {
        Name = "Content",
        Parent = tab.Button,
        BackgroundTransparency = 1,
        Size = UDim2.new(1, 0, 1, 0)
    })
    
    local ButtonLayout = CreateInstance("UIListLayout", {
        Parent = ButtonContent,
        FillDirection = Enum.FillDirection.Horizontal,
        HorizontalAlignment = Enum.HorizontalAlignment.Center,
        VerticalAlignment = Enum.VerticalAlignment.Center,
        SortOrder = Enum.SortOrder.LayoutOrder,
        Padding = UDim.new(0, 6)
    })
    
    if icon then
        local IconImg = CreateInstance("ImageLabel", {
            Name = "Icon",
            Parent = ButtonContent,
            BackgroundTransparency = 1,
            Size = UDim2.new(0, 18, 0, 18),
            Image = icon,
            ImageColor3 = Theme.TextDim,
            LayoutOrder = 1
        })
    end
    
    local ButtonText = CreateInstance("TextLabel", {
        Name = "Text",
        Parent = ButtonContent,
        BackgroundTransparency = 1,
        Size = UDim2.new(0, 0, 0, 20),
        Font = Enum.Font.GothamMedium,
        Text = name,
        TextColor3 = Theme.TextDim,
        TextSize = 13,
        TextXAlignment = Enum.TextXAlignment.Center,
        LayoutOrder = 2
    })
    
    -- Auto-size text
    ButtonText.Size = UDim2.new(0, ButtonText.TextBounds.X, 0, 20)
    
    -- Tab Click Button
    local ClickButton = CreateInstance("TextButton", {
        Name = "ClickButton",
        Parent = tab.Button,
        BackgroundTransparency = 1,
        Size = UDim2.new(1, 0, 1, 0),
        Text = "",
        ZIndex = 2
    })
    
    -- Tab Indicator
    tab.Indicator = CreateInstance("Frame", {
        Name = "Indicator",
        Parent = tab.Button,
        BackgroundColor3 = Theme.Accent,
        BorderSizePixel = 0,
        Position = UDim2.new(0, 0, 1, -2),
        Size = UDim2.new(1, 0, 0, 2),
        Visible = false
    })
    
    CreateInstance("UICorner", {
        CornerRadius = UDim.new(0, 2),
        Parent = tab.Indicator
    })
    
    -- Tab Page
    tab.Page = CreateInstance("ScrollingFrame", {
        Name = name .. "Page",
        Parent = self.ContentContainer,
        Active = true,
        BackgroundTransparency = 1,
        BorderSizePixel = 0,
        Position = UDim2.new(0, 0, 0, 0),
        Size = UDim2.new(1, 0, 1, 0),
        CanvasSize = UDim2.new(0, 0, 0, 0),
        ScrollBarThickness = 3,
        ScrollBarImageColor3 = Theme.Border,
        ScrollBarImageTransparency = 0.5,
        Visible = false
    })
    
    -- Content Layout
    tab.Layout = CreateInstance("UIListLayout", {
        Parent = tab.Page,
        SortOrder = Enum.SortOrder.LayoutOrder,
        Padding = UDim.new(0, 12)
    })
    
    CreateInstance("UIPadding", {
        Parent = tab.Page,
        PaddingLeft = UDim.new(0, 20),
        PaddingRight = UDim.new(0, 20),
        PaddingTop = UDim.new(0, 16),
        PaddingBottom = UDim.new(0, 16)
    })
    
    -- Auto-resize canvas
    tab.Layout:GetPropertyChangedSignal("AbsoluteContentSize"):Connect(function()
        tab.Page.CanvasSize = UDim2.new(0, 0, 0, tab.Layout.AbsoluteContentSize.Y + 32)
    end)
    
    -- Tab Selection
    ClickButton.MouseButton1Click:Connect(function()
        self:SelectTab(tab)
    end)
    
    -- Hover Effects
    ClickButton.MouseEnter:Connect(function()
        if self.CurrentTab ~= tab then
            CreateTween(tab.Button, {BackgroundColor3 = Theme.Tertiary, BackgroundTransparency = 0}, 0.15):Play()
        end
    end)
    
    ClickButton.MouseLeave:Connect(function()
        if self.CurrentTab ~= tab then
            CreateTween(tab.Button, {BackgroundTransparency = 1}, 0.15):Play()
        end
    end)
    
    table.insert(self.Tabs, tab)
    
    -- Select first tab by default
    if #self.Tabs == 1 then
        self:SelectTab(tab)
    end
    
    return tab
end

-- Tab Selection Method
function Window:SelectTab(tab)
    -- Deselect all tabs
    for _, t in pairs(self.Tabs) do
        t.Page.Visible = false
        t.Indicator.Visible = false
        CreateTween(t.Button, {BackgroundColor3 = Theme.Background, BackgroundTransparency = 1}, 0.2):Play()
       
        local icon = t.Button:FindFirstChild("Content"):FindFirstChild("Icon")
        if icon then
            CreateTween(icon, {ImageColor3 = Theme.TextDim}, 0.2):Play()
        end
       
        local text = t.Button:FindFirstChild("Content"):FindFirstChild("Text")
        if text then
            CreateTween(text, {TextColor3 = Theme.TextDim}, 0.2):Play()
        end
    end
   
    -- Select new tab
    tab.Page.Visible = true
    tab.Indicator.Visible = true
    CreateTween(tab.Button, {BackgroundColor3 = Theme.Tertiary, BackgroundTransparency = 0}, 0.2):Play()
   
    local icon = tab.Button:FindFirstChild("Content"):FindFirstChild("Icon")
    if icon then
        CreateTween(icon, {ImageColor3 = Theme.Text}, 0.2):Play()
    end
   
    local text = tab.Button:FindFirstChild("Content"):FindFirstChild("Text")
    if text then
        CreateTween(text, {TextColor3 = Theme.Text}, 0.2):Play()
    end
   
    self.CurrentTab = tab
end
-- Collapsible Section Class
local Section = {}
Section.__index = Section

function Tab:CreateSection(name, icon)
    local section = setmetatable({}, Section)
    section.Collapsed = false
    section.Elements = {}
    
    -- Section Container
    section.Container = CreateInstance("Frame", {
        Name = name,
        Parent = self.Page,
        BackgroundColor3 = Theme.Secondary,
        BorderSizePixel = 0,
        Size = UDim2.new(1, 0, 0, 44),
        ClipsDescendants = false,
        LayoutOrder = #self.Sections + 1
    })
    
    CreateInstance("UICorner", {
        CornerRadius = UDim.new(0, 10),
        Parent = section.Container
    })
    
    -- Section Header
    section.Header = CreateInstance("Frame", {
        Name = "Header",
        Parent = section.Container,
        BackgroundTransparency = 1,
        Size = UDim2.new(1, 0, 0, 44)
    })
    
    -- Header Content
    local HeaderContent = CreateInstance("Frame", {
        Name = "Content",
        Parent = section.Header,
        BackgroundTransparency = 1,
        Position = UDim2.new(0, 16, 0, 0),
        Size = UDim2.new(1, -32, 1, 0)
    })
    
    local HeaderLayout = CreateInstance("UIListLayout", {
        Parent = HeaderContent,
        FillDirection = Enum.FillDirection.Horizontal,
        VerticalAlignment = Enum.VerticalAlignment.Center,
        SortOrder = Enum.SortOrder.LayoutOrder,
        Padding = UDim.new(0, 10)
    })
    
    -- Collapse Arrow
    section.Arrow = CreateInstance("ImageLabel", {
        Name = "Arrow",
        Parent = HeaderContent,
        BackgroundTransparency = 1,
        Size = UDim2.new(0, 14, 0, 14),
        Image = Icons.Expand,
        ImageColor3 = Theme.TextDim,
        Rotation = 0,
        LayoutOrder = 1
    })
    
    -- Section Icon
    if icon then
        section.Icon = CreateInstance("ImageLabel", {
            Name = "SectionIcon",
            Parent = HeaderContent,
            BackgroundTransparency = 1,
            Size = UDim2.new(0, 20, 0, 20),
            Image = icon,
            ImageColor3 = Theme.Text,
            LayoutOrder = 2
        })
    end
    
    -- Section Name
    section.Label = CreateInstance("TextLabel", {
        Name = "SectionLabel",
        Parent = HeaderContent,
        BackgroundTransparency = 1,
        Size = UDim2.new(0, 0, 0, 20),
        Font = Enum.Font.GothamBold,
        Text = name,
        TextColor3 = Theme.Text,
        TextSize = 14,
        TextXAlignment = Enum.TextXAlignment.Left,
        LayoutOrder = 3
    })
    
    -- Auto-size label
    section.Label.Size = UDim2.new(0, section.Label.TextBounds.X, 0, 20)
    
    -- Header Button
    local HeaderButton = CreateInstance("TextButton", {
        Name = "HeaderButton",
        Parent = section.Header,
        BackgroundTransparency = 1,
        Size = UDim2.new(1, 0, 1, 0),
        Text = "",
        ZIndex = 2
    })
    
    -- Content Container
    section.Content = CreateInstance("Frame", {
        Name = "Content",
        Parent = section.Container,
        BackgroundTransparency = 1,
        Position = UDim2.new(0, 0, 0, 44),
        Size = UDim2.new(1, 0, 0, 0),
        ClipsDescendants = true
    })
    
    section.ContentLayout = CreateInstance("UIListLayout", {
        Parent = section.Content,
        SortOrder = Enum.SortOrder.LayoutOrder,
        Padding = UDim.new(0, 8)
    })
    
    CreateInstance("UIPadding", {
        Parent = section.Content,
        PaddingLeft = UDim.new(0, 16),
        PaddingRight = UDim.new(0, 16),
        PaddingTop = UDim.new(0, 8),
        PaddingBottom = UDim.new(0, 12)
    })
    
    -- Auto-resize
    section.ContentLayout:GetPropertyChangedSignal("AbsoluteContentSize"):Connect(function()
        if not section.Collapsed then
            local contentSize = section.ContentLayout.AbsoluteContentSize.Y + 20
            section.Content.Size = UDim2.new(1, 0, 0, contentSize)
            section.Container.Size = UDim2.new(1, 0, 0, 44 + contentSize)
        end
    end)
    
    -- Toggle Collapse
    function section:Toggle()
        section.Collapsed = not section.Collapsed
        
        if section.Collapsed then
            CreateTween(section.Arrow, {Rotation = -90}, 0.25):Play()
            CreateTween(section.Content, {Size = UDim2.new(1, 0, 0, 0)}, 0.25):Play()
            CreateTween(section.Container, {Size = UDim2.new(1, 0, 0, 44)}, 0.25):Play()
        else
            CreateTween(section.Arrow, {Rotation = 0}, 0.25):Play()
            local contentSize = section.ContentLayout.AbsoluteContentSize.Y + 20
            CreateTween(section.Content, {Size = UDim2.new(1, 0, 0, contentSize)}, 0.25):Play()
            CreateTween(section.Container, {Size = UDim2.new(1, 0, 0, 44 + contentSize)}, 0.25):Play()
        end
    end
    
    HeaderButton.MouseButton1Click:Connect(function()
        section:Toggle()
    end)
    
    -- Set initial state
    local contentSize = section.ContentLayout.AbsoluteContentSize.Y + 20
    section.Content.Size = UDim2.new(1, 0, 0, contentSize)
    section.Container.Size = UDim2.new(1, 0, 0, 44 + contentSize)
    
    table.insert(self.Sections, section)
    return section
end

-- Separator Element
function Section:CreateSeparator()
    local separator = CreateInstance("Frame", {
        Name = "Separator",
        Parent = self.Content,
        BackgroundColor3 = Theme.Separator,
        BorderSizePixel = 0,
        Size = UDim2.new(1, 0, 0, 1),
        LayoutOrder = #self.Elements + 1
    })
    
    table.insert(self.Elements, separator)
    return separator
end

-- Toggle Element with Icon
function Section:CreateToggle(config)
    config = config or {}
    local toggle = {}
    
    toggle.Frame = CreateInstance("Frame", {
        Name = config.Name or "Toggle",
        Parent = self.Content,
        BackgroundTransparency = 1,
        Size = UDim2.new(1, 0, 0, 38),
        LayoutOrder = #self.Elements + 1
    })
    
    -- Toggle Content
    local Content = CreateInstance("Frame", {
        Name = "Content",
        Parent = toggle.Frame,
        BackgroundTransparency = 1,
        Size = UDim2.new(1, 0, 1, 0)
    })
    
    local ContentLayout = CreateInstance("UIListLayout", {
        Parent = Content,
        FillDirection = Enum.FillDirection.Horizontal,
        VerticalAlignment = Enum.VerticalAlignment.Center,
        SortOrder = Enum.SortOrder.LayoutOrder,
        Padding = UDim.new(0, 10)
    })
    
    -- Icon
    if config.Icon then
        toggle.Icon = CreateInstance("ImageLabel", {
            Name = "Icon",
            Parent = Content,
            BackgroundTransparency = 1,
            Size = UDim2.new(0, 20, 0, 20),
            Image = config.Icon,
            ImageColor3 = Theme.TextDim,
            LayoutOrder = 1
        })
    end
    
    -- Label
    toggle.Label = CreateInstance("TextLabel", {
        Name = "Label",
        Parent = Content,
        BackgroundTransparency = 1,
        Size = UDim2.new(0, 0, 0, 20),
        Font = Enum.Font.Gotham,
        Text = config.Name or "Toggle",
        TextColor3 = Theme.Text,
        TextSize = 13,
        TextXAlignment = Enum.TextXAlignment.Left,
        LayoutOrder = 2
    })
    
    -- Auto-size label
    toggle.Label.Size = UDim2.new(0, toggle.Label.TextBounds.X, 0, 20)
    
    -- Toggle Switch
    toggle.Switch = CreateInstance("Frame", {
        Name = "Switch",
        Parent = toggle.Frame,
        AnchorPoint = Vector2.new(1, 0.5),
        BackgroundColor3 = Theme.Border,
        Position = UDim2.new(1, 0, 0.5, 0),
        Size = UDim2.new(0, 46, 0, 26)
    })
    
    CreateInstance("UICorner", {
        CornerRadius = UDim.new(0, 13),
        Parent = toggle.Switch
    })
    
    toggle.Indicator = CreateInstance("Frame", {
        Name = "Indicator",
        Parent = toggle.Switch,
        BackgroundColor3 = Theme.Text,
        Position = UDim2.new(0, 3, 0.5, 0),
        Size = UDim2.new(0, 20, 0, 20),
        AnchorPoint = Vector2.new(0, 0.5)
    })
    
    CreateInstance("UICorner", {
        CornerRadius = UDim.new(0, 10),
        Parent = toggle.Indicator
    })
    
    -- Drop shadow for indicator
    CreateInstance("ImageLabel", {
        Name = "Shadow",
        Parent = toggle.Indicator,
        AnchorPoint = Vector2.new(0.5, 0.5),
        BackgroundTransparency = 1,
        Position = UDim2.new(0.5, 0, 0.5, 2),
        Size = UDim2.new(1, 6, 1, 6),
        ZIndex = -1,
        Image = "rbxassetid://6015897843",
        ImageColor3 = Color3.new(0, 0, 0),
        ImageTransparency = 0.8,
        ScaleType = Enum.ScaleType.Slice,
        SliceCenter = Rect.new(49, 49, 450, 450)
    })
    
    -- Toggle State
    toggle.Enabled = config.Default or false
    toggle.Callback = config.Callback or function() end
    
    local function UpdateToggle()
        if toggle.Enabled then
            CreateTween(toggle.Switch, {BackgroundColor3 = Theme.Accent}, 0.2):Play()
            CreateTween(toggle.Indicator, {Position = UDim2.new(1, -23, 0.5, 0)}, 0.2):Play()
            if toggle.Icon then
                CreateTween(toggle.Icon, {ImageColor3 = Theme.Accent}, 0.2):Play()
            end
        else
            CreateTween(toggle.Switch, {BackgroundColor3 = Theme.Border}, 0.2):Play()
            CreateTween(toggle.Indicator, {Position = UDim2.new(0, 3, 0.5, 0)}, 0.2):Play()
            if toggle.Icon then
                CreateTween(toggle.Icon, {ImageColor3 = Theme.TextDim}, 0.2):Play()
            end
        end
        toggle.Callback(toggle.Enabled)
    end
    
    -- Click Handler
    local ClickButton = CreateInstance("TextButton", {
        Name = "ClickButton",
        Parent = toggle.Frame,
        BackgroundTransparency = 1,
        Size = UDim2.new(1, 0, 1, 0),
        Text = "",
        ZIndex = 2
    })
    
    ClickButton.MouseButton1Click:Connect(function()
        toggle.Enabled = not toggle.Enabled
        UpdateToggle()
    end)
    
    UpdateToggle()
    table.insert(self.Elements, toggle)
    return toggle
end

-- Enhanced Dropdown with Consistent Styling
function Section:CreateDropdown(config)
    config = config or {}
    local dropdown = {}
    dropdown.Open = false
    dropdown.Selected = config.Default or "None"
    
    dropdown.Frame = CreateInstance("Frame", {
        Name = config.Name or "Dropdown",
        Parent = self.Content,
        BackgroundTransparency = 1,
        Size = UDim2.new(1, 0, 0, 38),
        ClipsDescendants = false,
        LayoutOrder = #self.Elements + 1
    })
    
    -- Dropdown Content
    local Content = CreateInstance("Frame", {
        Name = "Content",
        Parent = dropdown.Frame,
        BackgroundTransparency = 1,
        Size = UDim2.new(1, 0, 0, 38)
    })
    
    local ContentLayout = CreateInstance("UIListLayout", {
        Parent = Content,
        FillDirection = Enum.FillDirection.Horizontal,
        VerticalAlignment = Enum.VerticalAlignment.Center,
        SortOrder = Enum.SortOrder.LayoutOrder,
        Padding = UDim.new(0, 10)
    })
    
    -- Icon
    if config.Icon then
        dropdown.Icon = CreateInstance("ImageLabel", {
            Name = "Icon",
            Parent = Content,
            BackgroundTransparency = 1,
            Size = UDim2.new(0, 20, 0, 20),
            Image = config.Icon,
            ImageColor3 = Theme.TextDim,
            LayoutOrder = 1
        })
    end
    
    -- Label
    dropdown.Label = CreateInstance("TextLabel", {
        Name = "Label",
        Parent = Content,
        BackgroundTransparency = 1,
        Size = UDim2.new(0, 0, 0, 20),
        Font = Enum.Font.Gotham,
        Text = config.Name or "Dropdown",
        TextColor3 = Theme.Text,
        TextSize = 13,
        TextXAlignment = Enum.TextXAlignment.Left,
        LayoutOrder = 2
    })
    
    -- Auto-size label
    dropdown.Label.Size = UDim2.new(0, dropdown.Label.TextBounds.X, 0, 20)
    
    -- Dropdown Button (styled like toggle switch area)
    dropdown.Button = CreateInstance("Frame", {
        Name = "DropdownButton",
        Parent = dropdown.Frame,
        BackgroundColor3 = Theme.Tertiary,
        Position = UDim2.new(1, -140, 0.5, -13),
        Size = UDim2.new(0, 140, 0, 26),
        AnchorPoint = Vector2.new(1, 0.5)
    })
    
    CreateInstance("UICorner", {
        CornerRadius = UDim.new(0, 8),
        Parent = dropdown.Button
    })
    
    dropdown.SelectedLabel = CreateInstance("TextLabel", {
        Name = "Selected",
        Parent = dropdown.Button,
        BackgroundTransparency = 1,
        Position = UDim2.new(0, 10, 0, 0),
        Size = UDim2.new(1, -35, 1, 0),
        Font = Enum.Font.Gotham,
        Text = dropdown.Selected,
        TextColor3 = Theme.TextDim,
        TextSize = 12,
        TextXAlignment = Enum.TextXAlignment.Left,
        TextTruncate = Enum.TextTruncate.AtEnd
    })
    
    dropdown.Arrow = CreateInstance("ImageLabel", {
        Name = "Arrow",
        Parent = dropdown.Button,
        AnchorPoint = Vector2.new(1, 0.5),
        BackgroundTransparency = 1,
        Position = UDim2.new(1, -8, 0.5, 0),
        Size = UDim2.new(0, 14, 0, 14),
        Image = Icons.Expand,
        ImageColor3 = Theme.TextDim,
        Rotation = 0
    })
    
    -- Dropdown List Container
    dropdown.ListContainer = CreateInstance("Frame", {
        Name = "ListContainer",
        Parent = dropdown.Frame,
        BackgroundColor3 = Theme.Tertiary,
        BorderSizePixel = 0,
        Position = UDim2.new(1, -140, 0, 38),
        Size = UDim2.new(0, 140, 0, 0),
        ClipsDescendants = true,
        ZIndex = 100,
        AnchorPoint = Vector2.new(1, 0)
    })
    
    CreateInstance("UICorner", {
        CornerRadius = UDim.new(0, 8),
        Parent = dropdown.ListContainer
    })
    
    CreateInstance("UIStroke", {
        Parent = dropdown.ListContainer,
        Color = Theme.Border,
        Thickness = 1,
        Transparency = 0.5
    })
    
    dropdown.List = CreateInstance("ScrollingFrame", {
        Name = "List",
        Parent = dropdown.ListContainer,
        Active = true,
        BackgroundTransparency = 1,
        BorderSizePixel = 0,
        Position = UDim2.new(0, 0, 0, 0),
        Size = UDim2.new(1, 0, 1, 0),
        CanvasSize = UDim2.new(0, 0, 0, 0),
        ScrollBarThickness = 2,
        ScrollBarImageColor3 = Theme.Border
    })
    
    local ListLayout = CreateInstance("UIListLayout", {
        Parent = dropdown.List,
        SortOrder = Enum.SortOrder.LayoutOrder,
        Padding = UDim.new(0, 2)
    })
    
    CreateInstance("UIPadding", {
        Parent = dropdown.List,
        PaddingLeft = UDim.new(0, 4),
        PaddingRight = UDim.new(0, 4),
        PaddingTop = UDim.new(0, 4),
        PaddingBottom = UDim.new(0, 4)
    })
    
    -- Add Options
    for i, option in ipairs(config.Options or {}) do
        local optionBtn = CreateInstance("TextButton", {
            Name = option,
            Parent = dropdown.List,
            BackgroundColor3 = Theme.Secondary,
            BorderSizePixel = 0,
            Size = UDim2.new(1, 0, 0, 28),
            Font = Enum.Font.Gotham,
            Text = option,
            TextColor3 = Theme.TextDim,
            TextSize = 12,
            LayoutOrder = i
        })
        
        CreateInstance("UICorner", {
            CornerRadius = UDim.new(0, 6),
            Parent = optionBtn
        })
        
        optionBtn.MouseEnter:Connect(function()
            CreateTween(optionBtn, {BackgroundColor3 = Theme.Quaternary}, 0.15):Play()
            CreateTween(optionBtn, {TextColor3 = Theme.Text}, 0.15):Play()
        end)
        
        optionBtn.MouseLeave:Connect(function()
            if dropdown.Selected ~= option then
                CreateTween(optionBtn, {BackgroundColor3 = Theme.Secondary}, 0.15):Play()
                CreateTween(optionBtn, {TextColor3 = Theme.TextDim}, 0.15):Play()
            end
        end)
        
        optionBtn.MouseButton1Click:Connect(function()
            dropdown.Selected = option
            dropdown.SelectedLabel.Text = option
            dropdown:Close()
            
            -- Update visual state for selected option
            for _, btn in ipairs(dropdown.List:GetChildren()) do
                if btn:IsA("TextButton") then
                    if btn.Text == option then
                        btn.BackgroundColor3 = Theme.Quaternary
                        btn.TextColor3 = Theme.Text
                    else
                        btn.BackgroundColor3 = Theme.Secondary
                        btn.TextColor3 = Theme.TextDim
                    end
                end
            end
            
            if config.Callback then
                config.Callback(option)
            end
        end)
        
        -- Highlight default selection
        if option == dropdown.Selected then
            optionBtn.BackgroundColor3 = Theme.Quaternary
            optionBtn.TextColor3 = Theme.Text
        end
    end
    
    -- Auto-size list
    ListLayout:GetPropertyChangedSignal("AbsoluteContentSize"):Connect(function()
        dropdown.List.CanvasSize = UDim2.new(0, 0, 0, ListLayout.AbsoluteContentSize.Y + 8)
    end)
    
    -- Click handler
    local ClickButton = CreateInstance("TextButton", {
        Name = "ClickButton",
        Parent = dropdown.Button,
        BackgroundTransparency = 1,
        Size = UDim2.new(1, 0, 1, 0),
        Text = "",
        ZIndex = 2
    })
    
    function dropdown:Open()
        self.Open = true
        local optionCount = #(config.Options or {})
        local targetHeight = math.min(optionCount * 30 + 8, 150)
        
        dropdown.Frame.Size = UDim2.new(1, 0, 0, 38 + targetHeight + 5)
        CreateTween(dropdown.ListContainer, {Size = UDim2.new(0, 140, 0, targetHeight)}, 0.25):Play()
        CreateTween(dropdown.Arrow, {Rotation = 180}, 0.25):Play()
        CreateTween(dropdown.Button, {BackgroundColor3 = Theme.Quaternary}, 0.15):Play()
    end
    
    function dropdown:Close()
        self.Open = false
        CreateTween(dropdown.ListContainer, {Size = UDim2.new(0, 140, 0, 0)}, 0.25):Play()
        CreateTween(dropdown.Arrow, {Rotation = 0}, 0.25):Play()
        CreateTween(dropdown.Button, {BackgroundColor3 = Theme.Tertiary}, 0.15):Play()
        wait(0.25)
        dropdown.Frame.Size = UDim2.new(1, 0, 0, 38)
    end
    
    ClickButton.MouseButton1Click:Connect(function()
        if dropdown.Open then
            dropdown:Close()
        else
            dropdown:Open()
        end
    end)
    
    table.insert(self.Elements, dropdown)
    return dropdown
end

-- Button Element
function Section:CreateButton(config)
    config = config or {}
    local button = {}
    
    button.Frame = CreateInstance("Frame", {
        Name = config.Name or "Button",
        Parent = self.Content,
        BackgroundTransparency = 1,
        Size = UDim2.new(1, 0, 0, 34),
        LayoutOrder = #self.Elements + 1
    })
    
    button.Button = CreateInstance("TextButton", {
        Name = "Button",
        Parent = button.Frame,
        BackgroundColor3 = Theme.Tertiary,
        BorderSizePixel = 0,
        Size = UDim2.new(1, 0, 1, 0),
        Font = Enum.Font.GothamMedium,
        Text = config.Name or "Button",
        TextColor3 = Theme.Text,
        TextSize = 13
    })
    
    CreateInstance("UICorner", {
        CornerRadius = UDim.new(0, 8),
        Parent = button.Button
    })
    
    button.Button.MouseEnter:Connect(function()
        CreateTween(button.Button, {BackgroundColor3 = Theme.Quaternary}, 0.15):Play()
    end)
    
    button.Button.MouseLeave:Connect(function()
        CreateTween(button.Button, {BackgroundColor3 = Theme.Tertiary}, 0.15):Play()
    end)
    
    button.Button.MouseButton1Click:Connect(function()
        if config.Callback then
            config.Callback()
        end
        
        -- Click animation
        CreateTween(button.Button, {BackgroundColor3 = Theme.Accent}, 0.1):Play()
        wait(0.1)
        CreateTween(button.Button, {BackgroundColor3 = Theme.Tertiary}, 0.2):Play()
    end)
    
    table.insert(self.Elements, button)
    return button
end

-- Enhanced Slider
function Section:CreateSlider(config)
    config = config or {}
    local slider = {}
    slider.Value = config.Default or config.Min or 0
    
    slider.Frame = CreateInstance("Frame", {
        Name = config.Name or "Slider",
        Parent = self.Content,
        BackgroundTransparency = 1,
        Size = UDim2.new(1, 0, 0, 52),
        LayoutOrder = #self.Elements + 1
    })
    
    -- Slider Header
    local Header = CreateInstance("Frame", {
        Name = "Header",
        Parent = slider.Frame,
        BackgroundTransparency = 1,
        Size = UDim2.new(1, 0, 0, 24)
    })
    
    slider.Label = CreateInstance("TextLabel", {
        Name = "Label",
        Parent = Header,
        BackgroundTransparency = 1,
        Position = UDim2.new(0, 0, 0, 0),
        Size = UDim2.new(0.6, 0, 1, 0),
        Font = Enum.Font.Gotham,
        Text = config.Name or "Slider",
        TextColor3 = Theme.Text,
        TextSize = 13,
        TextXAlignment = Enum.TextXAlignment.Left
    })
    
    slider.ValueLabel = CreateInstance("TextLabel", {
        Name = "Value",
        Parent = Header,
        BackgroundTransparency = 1,
        Position = UDim2.new(1, 0, 0, 0),
        Size = UDim2.new(0, -50, 1, 0),
        Font = Enum.Font.GothamMedium,
        Text = tostring(slider.Value) .. (config.Suffix or ""),
        TextColor3 = Theme.TextDim,
        TextSize = 12,
        TextXAlignment = Enum.TextXAlignment.Right
    })
    
    -- Slider Bar Container
    local BarContainer = CreateInstance("Frame", {
        Name = "BarContainer",
        Parent = slider.Frame,
        BackgroundTransparency = 1,
        Position = UDim2.new(0, 0, 0, 28),
        Size = UDim2.new(1, 0, 0, 20)
    })
    
    slider.SliderBar = CreateInstance("Frame", {
        Name = "SliderBar",
        Parent = BarContainer,
        BackgroundColor3 = Theme.Border,
        Position = UDim2.new(0, 0, 0.5, -3),
        Size = UDim2.new(1, 0, 0, 6)
    })
    
    CreateInstance("UICorner", {
        CornerRadius = UDim.new(0, 3),
        Parent = slider.SliderBar
    })
    
    slider.Fill = CreateInstance("Frame", {
        Name = "Fill",
        Parent = slider.SliderBar,
        BackgroundColor3 = Theme.Accent,
        Size = UDim2.new(0, 0, 1, 0)
    })
    
    CreateInstance("UICorner", {
        CornerRadius = UDim.new(0, 3),
        Parent = slider.Fill
    })
    
    slider.Knob = CreateInstance("Frame", {
        Name = "Knob",
        Parent = BarContainer,
        BackgroundColor3 = Theme.Text,
        Position = UDim2.new(0, 0, 0.5, 0),
        Size = UDim2.new(0, 18, 0, 18),
        AnchorPoint = Vector2.new(0.5, 0.5),
        ZIndex = 2
    })
    
    CreateInstance("UICorner", {
        CornerRadius = UDim.new(0, 9),
        Parent = slider.Knob
    })
    
    -- Knob shadow
    CreateInstance("ImageLabel", {
        Name = "Shadow",
        Parent = slider.Knob,
        AnchorPoint = Vector2.new(0.5, 0.5),
        BackgroundTransparency = 1,
        Position = UDim2.new(0.5, 0, 0.5, 2),
        Size = UDim2.new(1, 8, 1, 8),
        ZIndex = 1,
        Image = "rbxassetid://6015897843",
        ImageColor3 = Color3.new(0, 0, 0),
        ImageTransparency = 0.7,
        ScaleType = Enum.ScaleType.Slice,
        SliceCenter = Rect.new(49, 49, 450, 450)
    })
    
    -- Slider Logic
    local dragging = false
    local min = config.Min or 0
    local max = config.Max or 100
    local increment = config.Increment or 1
    
    local function UpdateSlider(input)
        local pos = math.clamp((input.Position.X - slider.SliderBar.AbsolutePosition.X) / slider.SliderBar.AbsoluteSize.X, 0, 1)
        local rawValue = min + (max - min) * pos
        slider.Value = math.floor(rawValue / increment + 0.5) * increment
        slider.ValueLabel.Text = tostring(slider.Value) .. (config.Suffix or "")
        
        local actualPos = (slider.Value - min) / (max - min)
        slider.Fill.Size = UDim2.new(actualPos, 0, 1, 0)
        slider.Knob.Position = UDim2.new(actualPos, 0, 0.5, 0)
        
        if config.Callback then
            config.Callback(slider.Value)
        end
    end
    
    slider.SliderBar.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            dragging = true
            UpdateSlider(input)
        end
    end)
    
    game:GetService("UserInputService").InputChanged:Connect(function(input)
        if dragging and input.UserInputType == Enum.UserInputType.MouseMovement then
            UpdateSlider(input)
        end
    end)
    
    game:GetService("UserInputService").InputEnded:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            dragging = false
        end
    end)
    
    -- Set initial value
    local initialPos = (slider.Value - min) / (max - min)
    slider.Fill.Size = UDim2.new(initialPos, 0, 1, 0)
    slider.Knob.Position = UDim2.new(initialPos, 0, 0.5, 0)
    
    table.insert(self.Elements, slider)
    return slider
end

-- Label Element
function Section:CreateLabel(text, centered)
    local label = {}
    
    label.Frame = CreateInstance("Frame", {
        Name = "Label",
        Parent = self.Content,
        BackgroundTransparency = 1,
        Size = UDim2.new(1, 0, 0, 20),
        LayoutOrder = #self.Elements + 1
    })
    
    label.Text = CreateInstance("TextLabel", {
        Name = "LabelText",
        Parent = label.Frame,
        BackgroundTransparency = 1,
        Size = UDim2.new(1, 0, 1, 0),
        Font = Enum.Font.Gotham,
        Text = text or "Label",
        TextColor3 = Theme.TextDim,
        TextSize = 12,
        TextXAlignment = centered and Enum.TextXAlignment.Center or Enum.TextXAlignment.Left,
        TextWrapped = true
    })
    
    function label:SetText(newText)
        self.Text.Text = newText
        -- Auto-resize height based on text
        self.Text.Size = UDim2.new(1, 0, 0, math.huge)
        self.Frame.Size = UDim2.new(1, 0, 0, self.Text.TextBounds.Y)
        self.Text.Size = UDim2.new(1, 0, 1, 0)
    end
    
    -- Initial sizing
    label:SetText(text or "Label")
    
    table.insert(self.Elements, label)
    return label
end

-- Notification System
function UILibrary:Notify(config)
    config = config or {}
    
    local notification = CreateInstance("Frame", {
        Name = "Notification",
        Parent = self.ScreenGui,
        BackgroundColor3 = Theme.Secondary,
        BorderSizePixel = 0,
        Position = UDim2.new(1, 320, 1, -80),
        Size = UDim2.new(0, 300, 0, 70),
        ZIndex = 1000
    })
    
    CreateInstance("UICorner", {
        CornerRadius = UDim.new(0, 10),
        Parent = notification
    })
    
    CreateInstance("UIStroke", {
        Parent = notification,
        Color = config.Type == "Success" and Theme.Success or 
               config.Type == "Warning" and Theme.Warning or 
               config.Type == "Error" and Theme.Error or Theme.Border,
        Thickness = 2
    })
    
    local title = CreateInstance("TextLabel", {
        Name = "Title",
        Parent = notification,
        BackgroundTransparency = 1,
        Position = UDim2.new(0, 14, 0, 10),
        Size = UDim2.new(1, -28, 0, 20),
        Font = Enum.Font.GothamBold,
        Text = config.Title or "Notification",
        TextColor3 = Theme.Text,
        TextSize = 14,
        TextXAlignment = Enum.TextXAlignment.Left
    })
    
    local content = CreateInstance("TextLabel", {
        Name = "Content",
        Parent = notification,
        BackgroundTransparency = 1,
        Position = UDim2.new(0, 14, 0, 32),
        Size = UDim2.new(1, -28, 0, 28),
        Font = Enum.Font.Gotham,
        Text = config.Content or "Notification content",
        TextColor3 = Theme.TextDim,
        TextSize = 12,
        TextXAlignment = Enum.TextXAlignment.Left,
        TextWrapped = true
    })
    
    -- Animate in
    CreateTween(notification, {Position = UDim2.new(1, -310, 1, -80)}, 0.4, Enum.EasingStyle.Back):Play()
    
    -- Auto remove
    wait(config.Duration or 3)
    CreateTween(notification, {Position = UDim2.new(1, 320, 1, -80)}, 0.3):Play()
    wait(0.3)
    notification:Destroy()
end

-- Cleanup
function Window:Destroy()
    CreateTween(self.Frame, {Size = UDim2.new(0, 0, 0, 0), Position = UDim2.new(0.5, 0, 0.5, 0)}, 0.3):Play()
    wait(0.3)
    self.Frame:Destroy()
end

return UILibrary
